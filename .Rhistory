summary(B0_dfEvaluation$distance)
B1_dfEvaluation <- mutate(B1_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
B2_dfEvaluation <- mutate(B2_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
summary(B2_dfEvaluation)
# facet grid:
ggplot(data = evaluation) + geom_point(aes(x = evaluation$LATITUDE, y = evaluation$LONGITUDE, colour = evaluation$distance)) + facet_grid(BUILDINGID ~ FLOOR)
setwd("/Users/Andi/Desktop/DataCourse/3 - Deep Analystics and Data visualization/3_ Evaluate Techniques for Wifi Locating/M3T3")
library("dplyr")
library("tidyr")
library("lubridate")
library("ggplot2")
library("forecast")
library("caret")
library("ggthemes")
####_============================================
#### Create Verification Dataset with Original values and Prediction ####
####_============================================
# Building prediction
dfEvaluation <- wifiVeri[,(ncol(wifiVeri)-8):ncol(wifiVeri)]
dfEvaluation$USERID <- NULL
dfEvaluation$SPACEID <- NULL
dfEvaluation$PHONEID <- NULL
dfEvaluation$TIMESTAMP <- NULL
dfEvaluation$RELATIVEPOSITION <- NULL
buildingPrediction <- as.factor(read.csv("UJIndoorLoc/BuildingPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
floorPrediction_B0 <- as.factor(read.csv("UJIndoorLoc/B0_FloorPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
floorPrediction_B1 <- as.factor(read.csv("UJIndoorLoc/B1_FloorPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
floorPrediction_B2 <- as.factor(read.csv("UJIndoorLoc/B2_FloorPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
latPrediction_B0 <- as.integer(read.csv("UJIndoorLoc/B0_LatitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
latPrediction_B1 <- as.integer(read.csv("UJIndoorLoc/B1_LatitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
latPrediction_B2 <- as.integer(read.csv("UJIndoorLoc/B2_LatitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
longPrediction_B0 <- as.integer(read.csv("UJIndoorLoc/B0_LongitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
longPrediction_B1 <- as.integer(read.csv("UJIndoorLoc/B1_LongitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
longPrediction_B2 <- as.integer(read.csv("UJIndoorLoc/B2_LongitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
dfEvaluation$buildingPred <- buildingPrediction
# split for Buildings and add Floor, Lat and Long predictions
# B0
B0_dfEvaluation <- dfEvaluation[which(dfEvaluation$BUILDINGID == 0),]
B0_dfEvaluation$floorPred <- floorPrediction_B0
B0_dfEvaluation$latPred <- latPrediction_B0
B0_dfEvaluation$longPred <- longPrediction_B0
B0_dfEvaluation <- mutate(B0_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
ggplot(data = B0_dfEvaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("B0 histogram of distance: prediction to location") #+ xlim(0, 500)
summary(B0_dfEvaluation$distance)
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LONGITUDE, y = B0_dfEvaluation$longPred))
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LONGITUDE, y = B0_dfEvaluation$distance))
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LATITUDE, y = B0_dfEvaluation$distance))
# B1
B1_dfEvaluation <- dfEvaluation[which(dfEvaluation$BUILDINGID == 1),]
B1_dfEvaluation$floorPred <- floorPrediction_B1
B1_dfEvaluation$latPred <- latPrediction_B1
B1_dfEvaluation$longPred <- longPrediction_B1
B1_dfEvaluation <- mutate(B1_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
ggplot(data = B1_dfEvaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("B1 histogram of distance: prediction to location") #+ xlim(0, 500)
summary(B1_dfEvaluation)
# B2
B2_dfEvaluation <- dfEvaluation[which(dfEvaluation$BUILDINGID == 2),]
B2_dfEvaluation$floorPred <- floorPrediction_B2
B2_dfEvaluation$latPred <- latPrediction_B2
B2_dfEvaluation$longPred <- longPrediction_B2
B2_dfEvaluation <- mutate(B2_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
ggplot(data = B2_dfEvaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("B2 histogram of distance: prediction to location") #+ xlim(0, 500)
summary(B2_dfEvaluation)
# remerge to 1 dataframe
evaluation <- rbind(B0_dfEvaluation, B1_dfEvaluation, B2_dfEvaluation)
nrow(evaluation)
# histogram of distance
ggplot(data = evaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("histogram of distance: prediction to location") #+ xlim(0, 500)
summary(evaluation$distance)
# plot prediction long lat
ggplot(data = evaluation, aes(x = evaluation$latPred, y = evaluation$longPred, colour = evaluation$BUILDINGID)) + geom_jitter()
ggplot(data = evaluation) + geom_point(aes(x = evaluation$LONGITUDE, y = evaluation$distance, colour = evaluation$BUILDINGID))
ggplot(data = evaluation) + geom_point(aes(x = evaluation$LATITUDE, y = evaluation$distance, colour = evaluation$BUILDINGID))
# facet grid:
ggplot(data = evaluation) + geom_point(aes(x = evaluation$LATITUDE, y = evaluation$LONGITUDE, colour = evaluation$distance)) + facet_grid(BUILDINGID ~ FLOOR)
# facet grid: top 50 points
summary(evaluation$distance)
str(evaluation$latPred)
str(evaluation$LATITUDE)
# facet grid:
ggplot(data = evaluation) + geom_point(aes(x = LATITUDE, y = LONGITUDE, colour = distance)) + facet_grid(BUILDINGID ~ FLOOR)
# facet grid:
ggplot(data = wifiTrain) + geom_point(aes(x = LATITUDE, y = LONGITUDE)) + facet_grid(BUILDINGID ~ FLOOR)
postResample(test_svm_B0_Latitude, B0_latitude_verification$LATITUDE)
setwd("/Users/Andi/Desktop/DataCourse/3 - Deep Analystics and Data visualization/3_ Evaluate Techniques for Wifi Locating/M3T3")
library("dplyr")
library("tidyr")
library("lubridate")
library("ggplot2")
library("forecast")
library("caret")
library("ggthemes")
####_============================================
#### Latitude prediction ####
####_============================================
sample3_Latitude_prediction <- sample_n(wifiTrain, 18323)
sample3_Latitude_prediction$USERID <- NULL
sample3_Latitude_prediction$TIMESTAMP <- NULL
sample3_Latitude_prediction$PHONEID <- NULL
sample3_Latitude_prediction$SPACEID <- NULL
sample3_Latitude_prediction$RELATIVEPOSITION <- NULL
train_control_3 <- trainControl(method ="repeatedcv",
number = 10)
####_###################################
#### Building 0 Latitude prediction ####
####_###################################
# select relevant Building
B0_latitude_prediction <- sample3_Latitude_prediction[which(sample3_Latitude_prediction$BUILDINGID == 0),]
# remove $BuildingID
B0_latitude_prediction$BUILDINGID <- NULL
# refactor floor prediction
B0_latitude_prediction$FLOOR <- NULL
# Train B0 Latitude prediction:
svm_B0_Latitude <- train(LATITUDE ~. -LONGITUDE,
na.action = na.exclude,
data = B0_latitude_prediction,
method = "svmLinear",
trControl = train_control_3)
# saveRDS
saveRDS(svm_B0_Latitude, "svm_B0_Latitude.RDS")
####_###################################
#### Building 1 Latitude prediction ####
####_###################################
# select relevant Building
B1_latitude_prediction <- sample3_Latitude_prediction[which(sample3_Latitude_prediction$BUILDINGID == 1),]
# remove $BuildingID
B1_latitude_prediction$BUILDINGID <- NULL
# refactor floor prediction
B1_latitude_prediction$FLOOR <- NULL
# Train B1 Latitude prediction:
svm_B1_Latitude <- train(LATITUDE ~. -LONGITUDE,
na.action = na.exclude,
data = B1_latitude_prediction,
method = "svmLinear",
trControl = train_control_3)
# saveRDS
saveRDS(svm_B1_Latitude, "svm_B1_Latitude.RDS")
####_###################################
#### Building 2 Latitude prediction ####
####_###################################
# select relevant Building
B2_latitude_prediction <- sample3_Latitude_prediction[which(sample3_Latitude_prediction$BUILDINGID == 2),]
# remove $BuildingID
B2_latitude_prediction$BUILDINGID <- NULL
# refactor floor prediction
B2_latitude_prediction$FLOOR <- NULL
# Train B2 Latitude prediction:
svm_B2_Latitude <- train(LATITUDE ~. -LONGITUDE,
na.action = na.exclude,
data = B2_latitude_prediction,
method = "svmLinear",
trControl = train_control_3)
# saveRDS
saveRDS(svm_B2_Latitude, "svm_B2_Latitude.RDS")
####_============================================
#### Latitude Testing ####
####_============================================
buildingPrediction <- as.factor(read.csv("UJIndoorLoc/BuildingPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
####_###################################
#### Building 0 Latitude prediction ####
####_###################################
# replace BuildingID with predicted values, remove all buildings except the one for the model, remove columns
B0_latitude_verification <- wifiVeri
B0_latitude_verification$BUILDINGID <- buildingPrediction
B0_latitude_verification <- B0_latitude_verification[which(B0_latitude_verification$BUILDINGID == 0) ,]
B0_latitude_verification <- B0_latitude_verification[, which(names(B0_latitude_verification) %in% names(B0_latitude_prediction))]
ncol(B0_floor_prediction)
ncol(B0_floor_verification)
# test prediction
test_svm_B0_Latitude <- predict(svm_B0_Latitude, newdata = B0_latitude_verification)
postResample(test_svm_B0_Latitude, B0_latitude_verification$LATITUDE)
# save prediction as csv
write.csv(test_svm_B0_Latitude, file = "UJIndoorLoc/B0_LatitudePrediction.csv", row.names = FALSE)
####_###################################
#### Building 1 Latitude prediction ####
####_###################################
# replace BuildingID with predicted values, remove all buildings except the one for the model, remove columns
B1_latitude_verification <- wifiVeri
B1_latitude_verification$BUILDINGID <- buildingPrediction
B1_latitude_verification <- B1_latitude_verification[which(B1_latitude_verification$BUILDINGID == 1) ,]
B1_latitude_verification <- B1_latitude_verification[, which(names(B1_latitude_verification) %in% names(B1_latitude_prediction))]
ncol(B1_floor_prediction)
ncol(B1_floor_verification)
# test prediction
test_svm_B1_Latitude <- predict(svm_B1_Latitude, newdata = B1_latitude_verification)
postResample(test_svm_B1_Latitude, B1_latitude_verification$LATITUDE)
# save prediction as csv
write.csv(test_svm_B1_Latitude, file = "UJIndoorLoc/B1_LatitudePrediction.csv", row.names = FALSE)
####_###################################
#### Building 1 Latitude prediction ####
####_###################################
# replace BuildingID with predicted values, remove all buildings except the one for the model, remove columns
B2_latitude_verification <- wifiVeri
B2_latitude_verification$BUILDINGID <- buildingPrediction
B2_latitude_verification <- B2_latitude_verification[which(B2_latitude_verification$BUILDINGID == 2) ,]
B2_latitude_verification <- B2_latitude_verification[, which(names(B2_latitude_verification) %in% names(B2_latitude_prediction))]
ncol(B2_floor_prediction)
ncol(B2_floor_verification)
# test prediction
test_svm_B2_Latitude <- predict(svm_B2_Latitude, newdata = B2_latitude_verification)
postResample(test_svm_B2_Latitude, B2_latitude_verification$LATITUDE)
# save prediction as csv
write.csv(test_svm_B2_Latitude, file = "UJIndoorLoc/B2_LatitudePrediction.csv", row.names = FALSE)
####_#####################################
#### End of Latitude Testing script####
####_#####################################
# facet grid:
ggplot(data = evaluation) + geom_point(aes(x = evaluation$LATITUDE, y = evaluation$LONGITUDE, colour = evaluation$distance)) + facet_grid(BUILDINGID ~ FLOOR)
summary(B2_dfEvaluation)
summary(B0_dfEvaluation$distance)
svm_B1_Floor
#knn Train B1 floor prediction:
knn_B1_Floor <- train(FLOOR ~. -LONGITUDE -LATITUDE,
na.action = na.exclude,
data = B1_floor_prediction,
method = "knn",
trControl = train_control_2)
knn_B1_Floor
svm_B1_Floor
knn_B1_Floor
test_knn_B1_Floor <- predict(knn_B1_Floor, newdata = B1_floor_verification)
postResample(test_knn_B1_Floor, B1_floor_verification$FLOOR)
knn_B0_Latitude <- train(LATITUDE ~. -LONGITUDE,
na.action = na.exclude,
data = B0_latitude_prediction,
method = "knn",
trControl = train_control_3)
# test prediction
test_svm_B0_Latitude <- predict(svm_B0_Latitude, newdata = B0_latitude_verification)
postResample(test_svm_B0_Latitude, B0_latitude_verification$LATITUDE)
postResample(test_svm_B0_Latitude, B0_latitude_verification$LATITUDE)
# test prediction
test_knn_B0_Latitude <- predict(knn_B0_Latitude, newdata = B0_latitude_verification)
postResample(test_knn_B0_Latitude, B0_latitude_verification$LATITUDE)
# save prediction as csv
write.csv(test_knn_B0_Latitude, file = "UJIndoorLoc/B0_LatitudePrediction.csv", row.names = FALSE)
postResample(test_svm_B0_Longitude, B0_longitude_verification$LONGITUDE)
# Train B1 Latitude prediction:
knn_B1_Latitude <- train(LATITUDE ~. -LONGITUDE,
na.action = na.exclude,
data = B1_latitude_prediction,
method = "knn",
trControl = train_control_3)
# test prediction
test_svm_B1_Latitude <- predict(svm_B1_Latitude, newdata = B1_latitude_verification)
postResample(test_svm_B1_Latitude, B1_latitude_verification$LATITUDE)
# test prediction
test_knn_B1_Latitude <- predict(knn_B1_Latitude, newdata = B1_latitude_verification)
postResample(test_knn_B1_Latitude, B1_latitude_verification$LATITUDE)
# save prediction as csv
write.csv(test_knn_B1_Latitude, file = "UJIndoorLoc/B1_LatitudePrediction.csv", row.names = FALSE)
# Train B2 Latitude prediction:
knn_B2_Latitude <- train(LATITUDE ~. -LONGITUDE,
na.action = na.exclude,
data = B2_latitude_prediction,
method = "knn",
trControl = train_control_3)
# test prediction
test_knn_B2_Latitude <- predict(knn_B2_Latitude, newdata = B2_latitude_verification)
postResample(test_knn_B2_Latitude, B2_latitude_verification$LATITUDE)
postResample(test_svm_B2_Latitude, B2_latitude_verification$LATITUDE)
# save prediction as csv
write.csv(test_svm_B0_Longitude, file = "UJIndoorLoc/B0_LongitudePrediction.csv", row.names = FALSE)
# save prediction as csv
write.csv(test_knn_B2_Latitude, file = "UJIndoorLoc/B2_LatitudePrediction.csv", row.names = FALSE)
saveRDS(knn_B0_Latitude, "knn_B0_Latitude.RDS")
saveRDS(knn_B1_Latitude, "knn_B1_Latitude.RDS")
saveRDS(knn_B2_Latitude, "knn_B2_Latitude.RDS")
# save prediction as csv
write.csv(test_knn_B0_Latitude, file = "UJIndoorLoc/B0_LatitudePrediction.csv", row.names = FALSE)
# save prediction as csv
write.csv(test_knn_B1_Latitude, file = "UJIndoorLoc/B1_LatitudePrediction.csv", row.names = FALSE)
# save prediction as csv
write.csv(test_knn_B2_Latitude, file = "UJIndoorLoc/B2_LatitudePrediction.csv", row.names = FALSE)
# Train B0 Latitude prediction:
knn_B0_Longitude <- train(LONGITUDE ~. -LATITUDE,
na.action = na.exclude,
data = B0_longitude_prediction,
method = "knn",
trControl = train_control_4)
knn_B0_Longitude
svm_B0_Longitude
saveRDS(knn_B0_Longitude, "knn_B0_Longitude.RDS")
# test prediction
test_knn_B1_Longitude <- predict(knn_B1_Longitude, newdata = B1_longitude_verification)
# test prediction
test_knn_B0_Longitude <- predict(knn_B0_Longitude, newdata = B0_longitude_verification)
# test prediction
test_svm_B0_Longitude <- predict(svm_B0_Longitude, newdata = B0_longitude_verification)
postResample(test_svm_B0_Longitude, B0_longitude_verification$LONGITUDE)
# test prediction
test_knn_B0_Longitude <- predict(knn_B0_Longitude, newdata = B0_longitude_verification)
postResample(test_knn_B0_Longitude, B0_longitude_verification$LONGITUDE)
# save prediction as csv
write.csv(test_knn_B0_Longitude, file = "UJIndoorLoc/B0_LongitudePrediction.csv", row.names = FALSE)
# Train B1 Longitude prediction:
knn_B1_Longitude <- train(LONGITUDE ~. -LATITUDE,
na.action = na.exclude,
data = B1_longitude_prediction,
method = "knn",
trControl = train_control_4)
svm_B1_Longitude
knn_B1_Longitude
saveRDS(knn_B1_Longitude, "knn_B1_Longitude.RDS")
# test prediction
test_knn_B1_Longitude <- predict(knn_B1_Longitude, newdata = B1_longitude_verification)
postResample(test_knn_B1_Longitude, B1_longitude_verification$LONGITUDE)
postResample(test_svm_B1_Longitude, B1_longitude_verification$LONGITUDE)
# save prediction as csv
write.csv(test_knn_B1_Longitude, file = "UJIndoorLoc/B1_LongitudePrediction.csv", row.names = FALSE)
# Train B2 Longitude prediction:
knn_B2_Longitude <- train(LONGITUDE ~. -LATITUDE,
na.action = na.exclude,
data = B2_longitude_prediction,
method = "knn",
trControl = train_control_4)
knn_B2_Longitude
svm_B2_Longitude
saveRDS(knn_B2_Longitude, "knn_B2_Longitude.RDS")
# test prediction
test_knn_B2_Longitude <- predict(knn_B2_Longitude, newdata = B2_longitude_verification)
postResample(test_knn_B2_Longitude, B2_longitude_verification$LONGITUDE)
postResample(test_svm_B2_Longitude, B2_longitude_verification$LONGITUDE)
# save prediction as csv
write.csv(test_knn_B2_Longitude, file = "UJIndoorLoc/B2_LongitudePrediction.csv", row.names = FALSE)
# save prediction as csv
write.csv(test_knn_B0_Longitude, file = "UJIndoorLoc/B0_LongitudePrediction.csv", row.names = FALSE)
# save prediction as csv
write.csv(test_knn_B1_Longitude, file = "UJIndoorLoc/B1_LongitudePrediction.csv", row.names = FALSE)
# save prediction as csv
write.csv(test_knn_B2_Longitude, file = "UJIndoorLoc/B2_LongitudePrediction.csv", row.names = FALSE)
setwd("/Users/Andi/Desktop/DataCourse/3 - Deep Analystics and Data visualization/3_ Evaluate Techniques for Wifi Locating/M3T3")
library("dplyr")
library("tidyr")
library("lubridate")
library("ggplot2")
library("forecast")
library("caret")
library("ggthemes")
# Building prediction
dfEvaluation <- wifiVeri[,(ncol(wifiVeri)-8):ncol(wifiVeri)]
dfEvaluation$USERID <- NULL
dfEvaluation$SPACEID <- NULL
dfEvaluation$PHONEID <- NULL
dfEvaluation$TIMESTAMP <- NULL
dfEvaluation$RELATIVEPOSITION <- NULL
buildingPrediction <- as.factor(read.csv("UJIndoorLoc/BuildingPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
floorPrediction_B0 <- as.factor(read.csv("UJIndoorLoc/B0_FloorPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
floorPrediction_B1 <- as.factor(read.csv("UJIndoorLoc/B1_FloorPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
floorPrediction_B2 <- as.factor(read.csv("UJIndoorLoc/B2_FloorPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
latPrediction_B0 <- as.integer(read.csv("UJIndoorLoc/B0_LatitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
latPrediction_B1 <- as.integer(read.csv("UJIndoorLoc/B1_LatitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
latPrediction_B2 <- as.integer(read.csv("UJIndoorLoc/B2_LatitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
longPrediction_B0 <- as.integer(read.csv("UJIndoorLoc/B0_LongitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
longPrediction_B1 <- as.integer(read.csv("UJIndoorLoc/B1_LongitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
longPrediction_B2 <- as.integer(read.csv("UJIndoorLoc/B2_LongitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
dfEvaluation$buildingPred <- buildingPrediction
# split for Buildings and add Floor, Lat and Long predictions
# B0
B0_dfEvaluation <- dfEvaluation[which(dfEvaluation$BUILDINGID == 0),]
B0_dfEvaluation$floorPred <- floorPrediction_B0
B0_dfEvaluation$latPred <- latPrediction_B0
B0_dfEvaluation$longPred <- longPrediction_B0
B0_dfEvaluation <- mutate(B0_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
ggplot(data = B0_dfEvaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("B0 histogram of distance: prediction to location") #+ xlim(0, 500)
summary(B0_dfEvaluation$distance)
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LONGITUDE, y = B0_dfEvaluation$longPred))
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LONGITUDE, y = B0_dfEvaluation$distance))
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LATITUDE, y = B0_dfEvaluation$distance))
summary(B0_dfEvaluation$distance)
summary(B1_dfEvaluation$distance)
summary(B2_dfEvaluation$distance)
dfEvaluation$buildingPred <- buildingPrediction
# split for Buildings and add Floor, Lat and Long predictions
# B0
B0_dfEvaluation <- dfEvaluation[which(dfEvaluation$BUILDINGID == 0),]
B0_dfEvaluation$floorPred <- floorPrediction_B0
B0_dfEvaluation$latPred <- latPrediction_B0
B0_dfEvaluation$longPred <- longPrediction_B0
B0_dfEvaluation <- mutate(B0_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
ggplot(data = B0_dfEvaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("B0 histogram of distance: prediction to location") #+ xlim(0, 500)
summary(B0_dfEvaluation$distance)
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LONGITUDE, y = B0_dfEvaluation$longPred))
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LONGITUDE, y = B0_dfEvaluation$distance))
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LATITUDE, y = B0_dfEvaluation$distance))
# B1
B1_dfEvaluation <- dfEvaluation[which(dfEvaluation$BUILDINGID == 1),]
B1_dfEvaluation$floorPred <- floorPrediction_B1
B1_dfEvaluation$latPred <- latPrediction_B1
B1_dfEvaluation$longPred <- longPrediction_B1
B1_dfEvaluation <- mutate(B1_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
ggplot(data = B1_dfEvaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("B1 histogram of distance: prediction to location") #+ xlim(0, 500)
summary(B1_dfEvaluation$distance)
# B2
B2_dfEvaluation <- dfEvaluation[which(dfEvaluation$BUILDINGID == 2),]
B2_dfEvaluation$floorPred <- floorPrediction_B2
B2_dfEvaluation$latPred <- latPrediction_B2
B2_dfEvaluation$longPred <- longPrediction_B2
B2_dfEvaluation <- mutate(B2_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
ggplot(data = B2_dfEvaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("B2 histogram of distance: prediction to location") #+ xlim(0, 500)
summary(B2_dfEvaluation$distance)
# remerge to 1 dataframe
evaluation <- rbind(B0_dfEvaluation, B1_dfEvaluation, B2_dfEvaluation)
nrow(evaluation)
# histogram of distance
ggplot(data = evaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("histogram of distance: prediction to location") #+ xlim(0, 500)
summary(evaluation$distance)
# plot prediction long lat
ggplot(data = evaluation, aes(x = evaluation$latPred, y = evaluation$longPred, colour = evaluation$BUILDINGID)) + geom_jitter()
ggplot(data = evaluation) + geom_point(aes(x = evaluation$LONGITUDE, y = evaluation$distance, colour = evaluation$BUILDINGID))
ggplot(data = evaluation) + geom_point(aes(x = evaluation$LATITUDE, y = evaluation$distance, colour = evaluation$BUILDINGID))
# facet grid:
ggplot(data = evaluation) + geom_point(aes(x = evaluation$LATITUDE, y = evaluation$LONGITUDE, colour = evaluation$distance)) + facet_grid(BUILDINGID ~ FLOOR)
# facet grid: top 50 points
postResample(test_svm_B0_Latitude, B0_latitude_verification$LATITUDE)
postResample(test_knn_B0_Latitude, B0_latitude_verification$LATITUDE)
dfEvaluation
str(dfEvaluation)
testPrediction_kNN_s1
library(e1071)
library(rpart)
set.seed(123)
####_#########################
#### Building prediction #####
####_#########################
sample1_building_prediction <- sample_n(wifiTrain, 18323)
sample1_building_prediction$USERID <- NULL
sample1_building_prediction$TIMESTAMP <- NULL
sample1_building_prediction$PHONEID <- NULL
sample1_building_prediction$SPACEID <- NULL
sample1_building_prediction$RELATIVEPOSITION <- NULL
train_control_1 <- trainControl(method ="repeatedcv",
number = 10
)
system.time(SVM_Building_prediction <- train(BUILDINGID ~. -LONGITUDE -LATITUDE -FLOOR,
na.action = na.exclude,
data = sample1_building_prediction,
method = "svmLinear3",
trControl = train_control_1))
evaluation$distance
summary(evaluation$distance)
postResample(test_svm_B2_Floor, B2_floor_verification$FLOOR)
nrow(B2_floor_verification)
postResample(test_svm_B1_Floor, B1_floor_verification$FLOOR)
nrow(B1_floor_verification)
postResample(test_svm_B0_Floor, B0_floor_verification$FLOOR)
nrow(B0_floor_verification)
536+307+268
268*92+307*81+536*97
101515/1111
setwd("/Users/Andi/Desktop/DataCourse/3 - Deep Analystics and Data visualization/2_ Visualize and Analyze energy data/")
getwd()
setwd("/Users/Andi/Desktop/DataCourse/3 - Deep Analystics and Data visualization/2_ Visualize and Analyze energy data/Markdown")
setwd("/Users/Andi/Desktop/DataCourse/3 - Deep Analystics and Data visualization/2_ Visualize and Analyze energy data/Markdown")
setwd("/Users/Andi/Desktop/DataCourse/3 - Deep Analystics and Data visualization/3_ Evaluate Techniques for Wifi Locating/M3T3")
library("dplyr")
library("tidyr")
library("lubridate")
library("ggplot2")
library("forecast")
library("caret")
library("ggthemes")
# Building prediction
dfEvaluation <- wifiVeri[,(ncol(wifiVeri)-8):ncol(wifiVeri)]
dfEvaluation$USERID <- NULL
dfEvaluation$SPACEID <- NULL
dfEvaluation$PHONEID <- NULL
dfEvaluation$TIMESTAMP <- NULL
dfEvaluation$RELATIVEPOSITION <- NULL
buildingPrediction <- as.factor(read.csv("UJIndoorLoc/BuildingPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
floorPrediction_B0 <- as.factor(read.csv("UJIndoorLoc/B0_FloorPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
floorPrediction_B1 <- as.factor(read.csv("UJIndoorLoc/B1_FloorPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
floorPrediction_B2 <- as.factor(read.csv("UJIndoorLoc/B2_FloorPrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
latPrediction_B0 <- as.integer(read.csv("UJIndoorLoc/B0_LatitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
latPrediction_B1 <- as.integer(read.csv("UJIndoorLoc/B1_LatitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
latPrediction_B2 <- as.integer(read.csv("UJIndoorLoc/B2_LatitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
longPrediction_B0 <- as.integer(read.csv("UJIndoorLoc/B0_LongitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
longPrediction_B1 <- as.integer(read.csv("UJIndoorLoc/B1_LongitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
longPrediction_B2 <- as.integer(read.csv("UJIndoorLoc/B2_LongitudePrediction.csv", sep = ",", stringsAsFactors = FALSE)[,1])
dfEvaluation$buildingPred <- buildingPrediction
# split for Buildings and add Floor, Lat and Long predictions
# B0
B0_dfEvaluation <- dfEvaluation[which(dfEvaluation$BUILDINGID == 0),]
B0_dfEvaluation$floorPred <- floorPrediction_B0
B0_dfEvaluation$latPred <- latPrediction_B0
B0_dfEvaluation$longPred <- longPrediction_B0
B0_dfEvaluation <- mutate(B0_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
ggplot(data = B0_dfEvaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("B0 histogram of distance: prediction to location") #+ xlim(0, 500)
summary(B0_dfEvaluation$distance)
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LONGITUDE, y = B0_dfEvaluation$longPred))
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LONGITUDE, y = B0_dfEvaluation$distance))
ggplot(data = B0_dfEvaluation) + geom_point(aes(x = B0_dfEvaluation$LATITUDE, y = B0_dfEvaluation$distance))
# B1
B1_dfEvaluation <- dfEvaluation[which(dfEvaluation$BUILDINGID == 1),]
B1_dfEvaluation$floorPred <- floorPrediction_B1
B1_dfEvaluation$latPred <- latPrediction_B1
B1_dfEvaluation$longPred <- longPrediction_B1
B1_dfEvaluation <- mutate(B1_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
ggplot(data = B1_dfEvaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("B1 histogram of distance: prediction to location") #+ xlim(0, 500)
summary(B1_dfEvaluation$distance)
# B2
B2_dfEvaluation <- dfEvaluation[which(dfEvaluation$BUILDINGID == 2),]
B2_dfEvaluation$floorPred <- floorPrediction_B2
B2_dfEvaluation$latPred <- latPrediction_B2
B2_dfEvaluation$longPred <- longPrediction_B2
B2_dfEvaluation <- mutate(B2_dfEvaluation, distance = sqrt((LONGITUDE - longPred)^2 + ((LATITUDE - latPred)^2)))
ggplot(data = B2_dfEvaluation) + geom_histogram(aes(x = distance), bins = 50) + ggtitle("B2 histogram of distance: prediction to location") #+ xlim(0, 500)
summary(B2_dfEvaluation$distance)
# remerge to 1 dataframe
evaluation <- rbind(B0_dfEvaluation, B1_dfEvaluation, B2_dfEvaluation)
nrow(evaluation)
summary(evaluation$distance)
